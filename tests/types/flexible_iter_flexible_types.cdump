flexible.c:31.18-28: `i < p->len' -> {0; 1}
flexible.c:31.18-19: `i' -> [0..0x7FFFFFFF]
flexible.c:31.22-28: `p->len' -> [1..0x7FFFFFFF]
flexible.c:31.22-23: `p' -> ([1..0xFFFFFFFF] : ({self : vector("#1")[{0}].(0)* | (self != 0)}))
flexible.c:32.5-8: `res' -> ([1..0xFFFFFFFF] : ({self : int(4)[{0}].(0)* | (self != 0)}))
flexible.c:32.11-20: `p->arr[i]' -> [--..--]
flexible.c:32.11-12: `p' -> ([1..0xFFFFFFFF] : ({self : vector("#1")[{0}].(0)* | (self != 0)}))
flexible.c:32.18-19: `i' -> [0..0x7FFFFFFE]
flexible.c:33.3-4: `p' -> ([1..0xFFFFFFFB] : ({self : vector("#1")[{0}].(0)* | (self != 0)}))
flexible.c:33.10-11: `i' -> [0..0x7FFFFFFE]
flexible.c:31.30-33: `i + 1' -> [1..0x7FFFFFFF]
flexible.c:31.30-31: `i' -> [0..0x7FFFFFFE]
Unproved regular alarms:
Unproved additional alarms:
Proved 4/4 regular alarms
Unproved 0 regular alarms and 0 additional alarms.
Solved 0/0 user assertions, proved 0
