reduce2.c:10.15-17: `*f' -> Concat [{ 32 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 };
                                      { 0 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 }]
reduce2.c:10.16-17: `f' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce2.c:11.6-10: `*(a.b)' -> Concat [{ 32 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 };
                                         { 0 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 }]
reduce2.c:11.7-10: `a.b' -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*)
Unproved regular alarms:
reduce2.c:11: Memory_access(*(a.b), read) {true;false}
Unproved additional alarms:
Proved 2/3 regular alarms
Unproved 1 regular alarms and 0 additional alarms.
Solved 0/0 user assertions, proved 0
