string.c:27.14-26: `(int *)str->content' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:27.14-26: `str->content' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:27.14-17: `str' -> {0} or ([1..0xFFFFFFFF] : (Name(struct string))[{0}].0*)
string.c:29.14-25: `str->length' -> [--..--]
string.c:29.14-17: `str' -> ([1..0xFFFFFFFB] : (Name(struct string))[{0}].0*)
string.c:30.17-27: `i < length' -> {0; 1}
string.c:30.17-18: `i' -> {0}
string.c:30.21-27: `length' -> [--..--]
string.c:31.4-12: `init + i' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:31.4-8: `init' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:31.11-12: `i' -> {0}
Unproved regular alarms:
string.c:27: Memory_access(str->content, read) {true;false}
string.c:31: Memory_access(*(init + i), write) {true;false}
Unproved additional alarms:
+ string.c:31 : { *(init + i) = '0'; } -> array_offset_access ;
Proved 1/3 regular alarms
Unproved 2 regular alarms and 1 additional alarms.
Solved 0/0 user assertions, proved 0
