string.c:61.14-26: `str->content' -> ([1..0xFFFFFFFF] :
                                       ({self : char(1)[[2..0x7FFFFFFF]][{0}].(0)* | (self != 0)}))
string.c:61.14-17: `str' -> ([1..0xFFFFFFFF] : ({self : Name(string)[{0}].(0)* | (self != 0)}))
string.c:63.8-23: `i < str->length' -> {0; 1}
string.c:63.8-9: `i' -> [0..0x7FFFFFFF]
string.c:63.12-23: `str->length' -> [2..0x7FFFFFFF]
string.c:63.12-15: `str' -> ([1..0xFFFFFFFB] : ({self : Name(string)[{0}].(0)* | (self != 0)}))
string.c:64.2-5: `ptr + i' -> ([1..0xFFFFFFFF] :
                                ({self : char(1)[[2..0x7FFFFFFF]][[0..0x7FFFFFFE]].(0)* | (self != 0)}))
string.c:64.2-5: `ptr' -> ([1..0xFFFFFFFF] :
                            ({self : char(1)[[2..0x7FFFFFFF]][{0}].(0)* | (self != 0)}))
string.c:64.6-7: `i' -> [0..0x7FFFFFFE]
string.c:65.2-5: `i + 1' -> [1..0x7FFFFFFF]
string.c:65.2-3: `i' -> [0..0x7FFFFFFE]
Unproved regular alarms:
Unproved additional alarms:
+ string.c:64 : { *(ptr + i) = (char)'0'; } -> array_offset_access ;
Proved 3/3 regular alarms
Unproved 0 regular alarms and 1 additional alarms.
Solved 0/0 user assertions, proved 0
