variant_ptr.c:15.6-30: `(ptr << 29) >> 29 == 1' -> {0; 1}
variant_ptr.c:15.7-24: `(ptr << 29) >> 29' -> {-4; -3; -2; -1; 0; 1; 2; 3}
variant_ptr.c:15.8-17: `ptr << 29' -> {-0x80000000; -0x60000000; -0x40000000; -0x20000000; 0; 0x20000000;
                                       0x40000000; 0x60000000}
variant_ptr.c:15.8-11: `ptr' -> [1..0xFFFFFFFF]
variant_ptr.c:16.24-39: `(expr *)((ptr >> 3) << 3)' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:16.24-39: `(ptr >> 3) << 3' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:16.25-33: `ptr >> 3' -> [-0x10000000..0xFFFFFFF]
variant_ptr.c:16.25-28: `ptr' -> [1..0xFFFFFFFF]
variant_ptr.c:17.22-35: `e->constant' -> <bottom>
variant_ptr.c:17.24-25: `e' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:20.24-39: `(expr *)((ptr >> 3) << 3)' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:20.24-39: `(ptr >> 3) << 3' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:20.25-33: `ptr >> 3' -> [-0x10000000..0xFFFFFFF]
variant_ptr.c:20.25-28: `ptr' -> [1..0xFFFFFFFF]
variant_ptr.c:21.12-22: `e_0->sum.a' -> <bottom>
variant_ptr.c:21.14-15: `e_0' -> [-0x80000000..0x7FFFFFF8],0%8
variant_ptr.c:22.12-22: `e_0->sum.b' -> <bottom>
variant_ptr.c:22.14-15: `e_0' -> [104..192],0%8
variant_ptr.c:23.25-38: `(expr *)((a >> 3) << 3)' -> <bottom>
variant_ptr.c:23.25-38: `(a >> 3) << 3' -> <bottom>
variant_ptr.c:23.26-32: `a >> 3' -> <bottom>
variant_ptr.c:23.26-27: `a' -> <bottom>
variant_ptr.c:24.25-38: `(expr *)((b >> 3) << 3)' -> <bottom>
variant_ptr.c:24.25-38: `(b >> 3) << 3' -> <bottom>
variant_ptr.c:24.26-32: `b >> 3' -> <bottom>
variant_ptr.c:24.26-27: `b' -> <bottom>
variant_ptr.c:27.27-29: `e1' -> <bottom>
Unproved regular alarms:
variant_ptr.c:17: Memory_access(e->constant, read) {true;false}
variant_ptr.c:21: Memory_access(e_0->sum.a, read) {true;false}
Unproved additional alarms:
Proved 1/3 regular alarms
Unproved 2 regular alarms and 0 additional alarms.
Solved 0/0 user assertions, proved 0
