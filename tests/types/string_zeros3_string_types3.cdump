string.c:38.14-26: `(int *)str->content' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:38.14-26: `str->content' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:38.14-17: `str' -> {0} or ([1..0xFFFFFFFF] : (Name(struct string))[{0}].0*)
string.c:39.13-17: `init' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:40.14-25: `str->length' -> [--..--]
string.c:40.14-17: `str' -> ([1..0xFFFFFFFB] : (Name(struct string))[{0}].0*)
string.c:41.13-26: `init + length' -> [-0x80000000..0x7FFFFFFC],0%4 or ([--..--] :
                                                                         (anyIntegerType(1))[{0}].0* + [-0x80000000..0x7FFFFFFC],0%4)
string.c:41.13-17: `init' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:41.20-26: `length' -> [--..--]
string.c:42.14-20: `length' -> [--..--]
string.c:42.22-27: `i > 0' -> {0; 1}
string.c:42.22-23: `i' -> [--..--]
string.c:43.21-37: `end - i == ptr' -> {0; 1}
string.c:43.22-29: `end - i' -> [-0x80000000..0x7FFFFFFC],0%4 or ([0..0xFFFFFFFB] :
                                                                   (anyIntegerType(1))[{0}].0* + [-0x80000000..0x7FFFFFFC],0%4)
string.c:43.22-25: `end' -> [-0x80000000..0x7FFFFFFC],0%4 or ([--..--] :
                                                               (anyIntegerType(1))[{0}].0* + [-0x80000000..0x7FFFFFFC],0%4)
string.c:43.28-29: `i' -> [1..0x7FFFFFFF]
string.c:43.34-37: `ptr' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:44.3-6: `ptr' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
Unproved regular alarms:
string.c:38: Memory_access(str->content, read) {true;false}
string.c:44: Memory_access(*ptr, write) {true;false}
Unproved additional alarms:
+ string.c:44 : { *ptr = 0; } -> array_offset_access ;
Proved 1/3 regular alarms
Unproved 2 regular alarms and 1 additional alarms.
string.c:43: assertion is FALSE (counter-example exists) (proved with smt solving)
Solved 1/1 user assertions, proved 0
