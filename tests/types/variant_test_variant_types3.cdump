variant.c:12.5-16: `e->tag == 0' -> {0; 1}
variant.c:12.5-11: `e->tag' -> [--..--]
variant.c:12.5-6: `e' -> ([1..0xFFFFFFFF] :
                           ({self :
                             struct {st_byte_size = Some(8); st_members =
                               [
                                 (0, "tag", int(4));
                                 (4, "data", int(4) with (self = 100));
                                 ]; }[{0}].(0)* | (self != 0)}))
variant.c:13.21-32: `e->tag == 0' -> {0x1}
variant.c:13.21-27: `e->tag' -> {0}
variant.c:13.21-22: `e' -> ([1..0xFFFFFFFF] :
                             ({self :
                               struct {st_byte_size = Some(8); st_members =
                                 [
                                   (0, "tag", int(4));
                                   (4, "data", int(4) with (self = 100));
                                   ]; }[{0}].(0)* | (self != 0)}))
variant.c:14.21-44: `e->data.constant < 1000' -> {0x1}
variant.c:14.21-37: `e->data.constant' -> {100}
variant.c:14.21-22: `e' -> ([1..0xFFFFFFFF] :
                             ({self :
                               struct {st_byte_size = Some(8); st_members =
                                 [
                                   (0, "tag", int(4));
                                   (4, "data", int(4) with (self = 100));
                                   ]; }[{0}].(0)* | (self != 0)}))
variant.c:17.21-32: `e->tag != 0' -> {0x1}
variant.c:17.21-27: `e->tag' -> [1..0xFFFFFFFF]
variant.c:17.21-22: `e' -> ([1..0xFFFFFFFF] :
                             ({self :
                               struct {st_byte_size = Some(8); st_members =
                                 [
                                   (0, "tag", int(4));
                                   (4, "data", int(4) with (self = 100));
                                   ]; }[{0}].(0)* | (self != 0)}))
variant.c:18.14-27: `e->data.sum.a' -> {100}
variant.c:18.14-15: `e' -> ([1..0xFFFFFFFF] :
                             ({self :
                               struct {st_byte_size = Some(8); st_members =
                                 [
                                   (0, "tag", int(4));
                                   (4, "data", int(4) with (self = 100));
                                   ]; }[{0}].(0)* | (self != 0)}))
variant.c:19.14-15: `e' -> ([1..0xFFFFFFFB] :
                             ({self :
                               struct {st_byte_size = Some(8); st_members =
                                 [
                                   (0, "tag", int(4));
                                   (4, "data", int(4) with (self = 100));
                                   ]; }[{0}].(0)* | (self != 0)}))
Unproved regular alarms:
Unproved additional alarms:
+ variant.c:19 : { expr *b = e->data.sum.b; } -> array_offset_access ;
Proved 6/6 regular alarms
Unproved 0 regular alarms and 1 additional alarms.
variant.c:13: assertion is TRUE (valid) (proved with abstract interpretation)
variant.c:14: assertion is TRUE (valid) (proved with abstract interpretation)
variant.c:17: assertion is TRUE (valid) (proved with abstract interpretation)
Solved 3/3 user assertions, proved 3
