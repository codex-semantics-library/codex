list_same.c:14.9-17: `lst != (struct alist *)0' -> {0; 1}
list_same.c:14.9-12: `lst' -> {0} or ([1..0xFFFFFFFF] : (Name(struct alist))[{0}].0*)
list_same.c:15.22-37: `*a == lst->data' -> {0; 1}
list_same.c:15.22-24: `*a' -> [--..--]
list_same.c:15.23-24: `a' -> {0} or ([1..0xFFFFFFFF] : (int(4))[{0}].0*)
list_same.c:15.28-37: `lst->data' -> [--..--]
list_same.c:15.28-31: `lst' -> ([1..0xFFFFFFFF] : (Name(struct alist))[{0}].0*)
list_same.c:16.5-6: `a' -> ([1..0xFFFFFFFF] : (int(4))[{0}].0*)
list_same.c:16.9-18: `lst->data' -> [--..--]
list_same.c:16.9-12: `lst' -> ([1..0xFFFFFFFF] : (Name(struct alist))[{0}].0*)
list_same.c:17.10-19: `lst->next' -> {0} or ([1..0xFFFFFFFF] : (Name(struct alist))[{0}].0*)
list_same.c:17.10-13: `lst' -> ([1..0xFFFFFFFF] : (Name(struct alist))[{0}].0*)
Unproved regular alarms:
list_same.c:15: Memory_access(*a, read) {true;false}
Unproved additional alarms:
Proved 4/5 regular alarms
Unproved 1 regular alarms and 0 additional alarms.
list_same.c:15: assertion is FALSE (counter-example exists) (proved with smt solving)
Solved 1/1 user assertions, proved 0
