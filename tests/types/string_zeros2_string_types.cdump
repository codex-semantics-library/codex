string.c:27.14-26: `(int *)str->content' -> ([1..0xFFFFFFFF] :
                                              ({self : char(1)[[2..0x7FFFFFFF]][{0}].(0)* | (self != 0)}))
string.c:27.14-26: `str->content' -> ([1..0xFFFFFFFF] :
                                       ({self : char(1)[[2..0x7FFFFFFF]][{0}].(0)* | (self != 0)}))
string.c:27.14-17: `str' -> ([1..0xFFFFFFFF] : ({self : Name(string)[{0}].(0)* | (self != 0)}))
string.c:29.14-25: `str->length' -> [2..0x7FFFFFFF]
string.c:29.14-17: `str' -> ([1..0xFFFFFFFB] : ({self : Name(string)[{0}].(0)* | (self != 0)}))
string.c:30.17-27: `i < length' -> {0; 1}
string.c:30.17-18: `i' -> [0..0x7FFFFFFF]
string.c:30.21-27: `length' -> [2..0x7FFFFFFF]
string.c:31.4-12: `init + i' -> ([1..0xFFFFFFFF] :
                                  ({self : char(1)[[2..0x7FFFFFFF]][[-0x80000000..0x7FFFFFFC],0%4].(0)* |
                                    (self != 0)}))
string.c:31.4-8: `init' -> ([1..0xFFFFFFFF] :
                             ({self : char(1)[[2..0x7FFFFFFF]][{0}].(0)* | (self != 0)}))
string.c:31.11-12: `i' -> [0..0x7FFFFFFE]
string.c:30.29-32: `i + 1' -> [1..0x7FFFFFFF]
string.c:30.29-30: `i' -> [0..0x7FFFFFFE]
Unproved regular alarms:
Unproved additional alarms:
+ string.c:31 : { *(init + i) = '0'; } -> store_param_nonptr ;
Proved 3/3 regular alarms
Unproved 0 regular alarms and 1 additional alarms.
Solved 0/0 user assertions, proved 0
