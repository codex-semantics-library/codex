string.c:50.14-26: `str->content' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:50.14-17: `str' -> {0} or ([1..0xFFFFFFFF] : (Name(struct string))[{0}].0*)
string.c:51.15-18: `ptr' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:52.14-25: `str->length' -> [--..--]
string.c:52.14-17: `str' -> ([1..0xFFFFFFFB] : (Name(struct string))[{0}].0*)
string.c:53.17-27: `i < length' -> {0; 1}
string.c:53.17-18: `i' -> [0..0x7FFFFFFF]
string.c:53.21-27: `length' -> [--..--]
string.c:54.21-38: `init + i == ptr' -> {0; 1}
string.c:54.22-30: `init + i' -> [0..0x7FFFFFFE] or ([1..0xFFFFFFFF] :
                                                      (anyIntegerType(1))[{0}].0* + [0..0x7FFFFFFE])
string.c:54.22-26: `init' -> {0} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:54.29-30: `i' -> [0..0x7FFFFFFE]
string.c:54.35-38: `ptr' -> {0; 49} or ([1..0xFFFFFFFF] : (anyIntegerType(1))[{0}].0*)
string.c:56.2-7: `ptr + 1' -> {48} + 0x1
string.c:56.2-5: `ptr' -> {48}
string.c:53.29-32: `i + 1' -> [1..0x7FFFFFFF]
string.c:53.29-30: `i' -> [0..0x7FFFFFFE]
Unproved regular alarms:
string.c:50: Memory_access(str->content, read) {true;false}
Unproved additional alarms:
Proved 1/2 regular alarms
Unproved 1 regular alarms and 0 additional alarms.
string.c:54: assertion is FALSE (counter-example exists) (proved with smt solving)
Solved 1/1 user assertions, proved 0
