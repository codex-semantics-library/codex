reduce3.c:13.15-17: `*h' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:13.16-17: `h' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbtree)[{0}].(0)* | (self != 0)}))
reduce3.c:14.16-17: `(struct a *)j' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:14.16-17: `j' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:15.6-10: `*(i.e)' -> Concat [{ 32 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 };
                                         { 0 -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*) of size 32 }]
reduce3.c:15.7-10: `i.e' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:16.6-9: `f.b' -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*)
reduce3.c:17.2-3: `a' -> ([1..0xFFFFFFFF] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:18.6-9: `f.b' -> {0} or ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*)
reduce3.c:19.4-5: `g' -> ([1..0xFFFFFFFF] : (Name(struct rbnode))[{0}].0*)
reduce3.c:19.11-12: `(struct a *)j' -> ([1..0xFFFFFFFB] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
reduce3.c:19.11-12: `j' -> ([1..0xFFFFFFFB] : ({self : Name(struct rbnode)[{0}].(0)* | (self != 0)}))
Unproved regular alarms:
Unproved additional alarms:
Proved 7/7 regular alarms
Unproved 0 regular alarms and 0 additional alarms.
Solved 0/0 user assertions, proved 0
